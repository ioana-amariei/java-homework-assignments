
Lab 10
[valid 2017-2018]

Persistence
Continue the application from lab 9, creating an object-oriented model and using JPA (Java Persistence API) in order to comunicate with the relational database.

The main specifications of the application are:

Compulsory (1p)

    Create a persistence unit with the name "MusicAlbumsPU" (use EclipseLink or Hibernate or other JPA implementation).
    Verify the presence of the persistence.xml file in your project. Make sure that the driver for EclipseLink or Hibernate was added to to your project classpath (or add it yourself).
    Create the package entity in your project and define the entity classes Artist and Album. You may use the Netbeans support: "Persistence -> Entity Classes from Database".
    Create the package controller in your project and define the classes ArtistController and AlbumController. Implement the class AlbumController in the same manner as the class ArtistController given below:

    public class ArtistController {
        private EntityManagerFactory emf;
        public ArtistController(EntityManagerFactory emf) {
            this.emf = emf;
        }
        public void create(Artist artist) {
            EntityManager em = emf.createEntityManager();
            em.getTransaction().begin();
            em.persist(artist);
            em.getTransaction().commit();
            em.close();
        }
        public Artist findByName(String artistName) {
            EntityManager em = emf.createEntityManager();
            Query query = em.createQuery("select t from Artist t where t.name=:name");
            List<Artist> artists = query.setParameter("name", artistName).getResultList();
            em.close();
            return artists.isEmpty() ? null : artists.get(0);
        }
    }

    You may use the Netbeans support: "Persistence -> JPA Controller Classes from Entity Classes". Inspect these classes and modify them if necessary :)
    Create the package app and the class AlbumManager

    public class AlbumManager {
        static final EntityManagerFactory emf = Persistence.createEntityManagerFactory("MusicAlbumsPU");

        public void run() {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                System.out.print("Input command:");
                String command = scanner.nextLine();
                if (command.equals("exit")) break;
                String[] params = command.trim().split("\\s+");
                switch (params[0]) {
                    case "create-artist":
                        createArtist(params[1]); //the artist name
                        break;
                    case "create-album":
                        createAlbum(params[1], params[2]); //the album name and the artist name
                        break;
                    case "list-albums":
                        listAlbums(params[1]); //the artist name
                        break;				
                }
            }
        }
        private void createArtist(String artistName) {
    		...//Implement this method
        }
        private void createAlbum(String albumName, String artistName) {
    		...//Implement this method
        }
        private void listAlbums(String artistName) {
    		...//Implement this method
        }
        public static void main(String args[]) {
            new AlbumManager().run();
        }
    }

Optional (1p)

    Extend the model in order to include support for charts.
    Create a generic AbstractController using generics in order to simplify the creation of the controller classes. You may take a look at the CrudRepository interface from Spring Framework. 

Bonus

    Create both the JDBC and JPA implementations and use an AbstractFactory in order to create the DAO objects (the controllers). The application will use JDBC or JPA depending on a parameter given in an initialization file. 

Resources

    JPA Tutorial
    Java EE Tutorial: Persistence
    Java Persistence Performance 

