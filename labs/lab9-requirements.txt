
Lab 9
[valid 2016-2017]

JDBC
Write an application that allows to connect to a relational database by using JDBC, submit SQL statements and display the results.

The main specifications of the application are:

Compulsory (1p)

    Create a database having the name MusicAlbums using any RDBMS (Oracle, Postgres, MySql, Java DB, etc.)
    Create a user with the name dba and the password sql
    Create the following tables (this example uses Java DB SQL Dialect):

    create table artists(
        id integer not null generated always as identity (start with 1, increment by 1),
        name varchar(100) not null,
        country varchar(100),
        primary key (id)
    );
    create table albums(
        id integer not null generated always as identity (start with 1, increment by 1),
        name varchar(100) not null,
        artist_id integer not null references artists on delete restrict,
        release_year integer,
        primary key (id)
    );

    Add the database driver to the project libraries.
    Create the singleton class Database that creates a connection to the database.

    public class Database {
        private static final String URL = "jdbc:derby://localhost:1527/MusicAlbums";
        private static final String USER = "dba";
        private static final String PASSWORD = "sql";
        private static Connection connection = null;
        private Database() { }
        public static Connection getConnection() {
            if (connection == null) {
                createConnection();
            }
            return connection;
        }
        ...//Implement the method createConnection()
        ...//Implement the method closeConnection()
        ...//Implement the method commit()
        ...//Implement the method rollback()    
    }

    Create the DAO classes ArtistController, AlbumController using the following model:

    public class ArtistController {
        public void create(String name, String country) throws SQLException {
            Connection con = Database.getConnection();
            try (PreparedStatement pstmt = con.prepareStatement("insert into artists (name, country) values (?, ?)")) {
                pstmt.setString(1, name);
                pstmt.setString(2, country);
                pstmt.executeUpdate();
            }
        }
        public Integer findByName(String name) throws SQLException {
            Connection con = Database.getConnection();
            try (Statement stmt = con.createStatement();
                    ResultSet rs = stmt.executeQuery("select id from artists where name='" + name + "'")) {
                return rs.next() ? rs.getInt(1) : null;
            }
        }
    }

    Create a simple test in the main method:

            try {
                ArtistController artists = new ArtistController();
                AlbumController albums = new AlbumController();
                
                artists.create("Radiohead", "United Kingdom");
                artists.create("Phoenix", "Romania");
                Database.commit();
    							
                int phoenixId = artists.findByName("Phoenix");
                albums.create(phoenixId, "Mugur de fluier", 1974);
    					
                ...//Add the Radiohead's albums ("OK Computer", 1997), ("Kid A", 2000), ("In Rainbows", 2007)
    			
                albums.list(radioheadId); //displays all the albums from the specified artist
                Database.commit();
                
                Database.closeConnection();
            } catch (SQLException e) {
                System.err.println(e);
                Database.rollback();
            }

Optional (1p)

    Create the necessary table(s) in order to store charts in the database (a chart contains some albums in a specific order).
    Create an object-oriented model of the data managed by the Java application.
    Consider creating an abstract EntityController that will handle generic CRUD operations.
    Generate random data and insert it into the database. You may consider using a fake data generator. (Or you may import real data ...)
    Display the ranking of the artists, considering their positions in the charts. 

Bonus

    Generate suggestive HTML reports, using DynamicReports or another reporting tool .
    ... or ...
    Create a SOAP or REST service that will offer informations about the data stored in the database. The request may be a generic query and the service will respond with the result of that query.
    You may want to take a look at SoapUI or "How to deploy a Java Web Service without a server like Tomcat/JBoss?" 

Resources

    JDBC
    Oracle Database JDBC Developer's Guide and Reference
    JDBC Tutorial - The ULTIMATE Guide 

Objectives

    Understand terms and concepts related to relational databases: DBMS, SQL, table, query, stored procedure, cursor, etc.
    Connect to a relational database by using a JDBC driver
    Submit queries and get results from the database
    Specify JDBC driver information externally
    Perform CRUD operations by using the JDBC API 

