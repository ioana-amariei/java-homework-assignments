
Lab 2
[valid 2017-2018]

Starting from this week...:

    Comment and properly format the source code of your programs (otherwise: -0.5 points)
    Use the naming conventions for writing Java code. "Naming conventions make programs more understandable by making them easier to read." (otherwise: -0.5 points)
    Use the API documentation: Java Platform, Standard Edition 8 API Specification (otherwise...) 



The Student-Project Allocation Problem (SPA)
(The definition of the problem is similar with the one given in: "The Student-Project Allocation Problem", by David J. Abraham, Robert W. Irving, and David F. Manlove)

An instance of SPA involves a set of students, projects and teachers. Each teacher offers a unique project having a capacity constraint (an upper bound regarding how many students can be enrolled).
A student may be enrolled in at most one project. Each student has a preferences list over the available projects that he/she finds acceptable, whilst a teacher will normally have preferences over the students that he/she is willing to supervise.

We consider the problem of allocating students to projects based on these preference lists and capacity constraints, the so-called Student-Project Allocation problem (SPA).

Example: 4 students, 3 teachers, each offering one project, having capacities: c(P1) = 2, c(P2) = 1, c(P3) = 1.
Student preferences 	Teacher preferences 	Available projects
S1: (P1, P2, P3) 	   T1: (S3, S1, S2, S4) 		T1 offers P1
S2: (P1, P3, P2) 	   T2: (S1, S2, S3, S4) 		T2 offers P2
S3: (P1) 	           T3: (S4, S3, S1, S2) 	    T3 offers P3
S4: (P3, P2 ,P1) 	  	 
A solution for this example might be: [(S1:P1),(S2:P2),(S3:P1),(S4:P3)]

The main specifications of the application are:

Compulsory (1p)

    Create an object-oriented model of the problem. You should have at least the following classes: Student, Teacher, Project, Problem.
    Note that students and teachers are persons, having various properties specific to humans, like: name, email, etc. A project must have at least the properties: name and capacity.
    Each class should have appropriate constructors, getters and setters.
    Use the IDE features for code generation, such as generating getters and setters.
    The toString method form the Object class must be properly overridden for all the classes.
    Use the IDE features for code generation, for example (in NetBeans) press Alt+Ins or invoke the context menu, select "Insert Code" and then "toString()" (or simply start typing "toString" and then press Ctrl+Space).
    Create and print on the screen the instance of the problem described in the example.

            Student s1 = new Student("S1", "s1@info.uaic.ro");
            Student s2 = ...;
            ...
            Teacher t1 = new Teacher("T1", "t1@info.uaic.ro");		
            Project p1 = t1.createProject("P1", 2); //capacity of the project is 2
            ...
            ...
            s1.setPreferences(p1, p2, p3);
            ...
            t1.setPreferences(s3, s1, s2, s4);                
            ...
            Problem problem = new Problem();
            problem.setStudents(s1, s2, s3, s4);
            problem.setTeachers(t1, t2, t3);
            System.out.println(problem);

Optional (1p)

    Override the equals method form the Object class for the Student and Teacher classes. The problem should not allow adding the same person twice.
    Implement the method getParticipants in the Problem class, returning an array of all the students and theachers involved.
    Implement an algorithm for allocating students to projects, subject to the preferences and capacities. The solution should be a matching between students and projects. Consider creating a class to describe such a matching.
    Analyse how "good" is this matching from the students or projects point of views.
    Write doc comments in your source code and generate the class documentation using javadoc. 

Bonus
Consider the case in which:

    a teacher may propose more than one project;
    not only projects, but also teachers have capacity constraints (the maximum numbers of students for each teacher). 

Implement the Gale-Shapley algorithm to generate a stable matching between students and projects, for example the one described in this article.

Resources

    Tutorial: Object-Oriented Programming Concepts
    Tutorial: Classes and Objects
    Java Language Specification: Classes 

Objectives

    Create a project containing multiple classes.
    Instantiate classes and manipulate objects.
    Understand the concepts of: object identity, object state, encapsulation, property, accessors/mutators.
    Override methods of the Object class.
    Understand uni- and bi-directional relations among objects.
    Understand the notion of multiplicity (one-to-one, one-to-many, many-to-many).
    Implement instance-level relationships among objects (association).
    Implement class-level relationships (generalization)
    Work with abstract classes.
    Get used to the naming conventions of the Java language.
    Generate documentation using javadoc. 

